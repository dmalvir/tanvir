# tanvir
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from sklearn.cluster import KMeans

data = pd.read_csv('iris_dataset.csv')
data

plt.scatter(data['sepal_length'], data['sepal_width'])
plt.xlabel('sepal_length')
plt.ylabel('sepal_width')
plt.show()

x = data.copy()

kmeans = KMeans(2)

kmeans.fit(x)

clusters = data.copy()

clusters['cluster_pred'] = kmeans.fit_predict(x)

plt.scatter(clusters['sepal_length'], clusters['sepal_width'], c = clusters['cluster_pred'], cmap='rainbow')

from sklearn import preprocessing
x_scaled = preprocessing.scale(data)
x_scaled

kmeans_scaled = KMeans(2)
kmeans_scaled.fit(x_scaled)

clusters_scaled = data.copy()
clusters_scaled['cluster_pred'] = kmeans_scaled.fit_predict(x_scaled)


plt.scatter(clusters_scaled['sepal_length'], clusters_scaled['sepal_width'], c = clusters_scaled['cluster_pred'], cmap='rainbow')

wcss = []
cl_num = 10
for i in range(1,cl_num):
    kmeans = KMeans(i)
    kmeans.fit(x_scaled)
    wcss_iter = kmeans.inertia_
    wcss.append(wcss_iter)
wcss
    

number_clusters = range(1,cl_num)
plt.plot(number_clusters, wcss)
plt.title('The Elboe Method')
plt.xlabel('Number of clusters')
plt.ylabel('within_clusters Sum of squares')

kmeans_2 = KMeans(2)
kmeans.fit(x_scaled)

clusters_2 = x.copy()
clusters_2['cluster_pred'] = kmeans_2.fit_predict(x_scaled)

plt.scatter(clusters_2['sepal_length'], clusters_2['sepal_width'], c = clusters_2['cluster_pred'], cmap='rainbow')

kmeans_3 = KMeans(3)
kmeans.fit(x_scaled)

clusters_3 = x.copy()
clusters_3['cluster_pred'] = kmeans_3.fit_predict(x_scaled)

plt.scatter(clusters_3['sepal_length'], clusters_3['sepal_width'], c = clusters_3['cluster_pred'], cmap='rainbow')

kmeans_5 = KMeans(5)
kmeans.fit(x_scaled)

clusters_5 = x.copy()
clusters_5['cluster_pred'] = kmeans_5.fit_predict(x_scaled)

plt.scatter(clusters_5['sepal_length'], clusters_5['sepal_width'], c = clusters_5['cluster_pred'], cmap='rainbow')

real_data = pd.read_csv('iris_with_answers.csv')

real_data['species'].unique()

real_data['species'] = real_data['species'].map({'setosa': 0, 'versicolor': 1, 'virginica': 2})

real_data.head()

plt.scatter(real_data['sepal_length'], real_data['sepal_width'], c = real_data['species'], cmap='rainbow')

plt.scatter(real_data['petal_length'], real_data['petal_width'], c = real_data['species'], cmap='rainbow')

plt.scatter(clusters_3['sepal_length'], clusters_3['sepal_width'], c = clusters_3['cluster_pred'], cmap='rainbow')

plt.scatter(clusters_3['petal_length'], clusters_3['petal_width'], c = clusters_3['cluster_pred'], cmap='rainbow')

